@page "/"

@using Portfolio.Client
@using Portfolio.Mappers
@using Portfolio.Model.Project
@using Portfolio.Model.Text
@using Portfolio.Services.Markdown

@inject AppState AppState
@inject LightboxRegistry LightboxRegistry
@inject LanguageTable LanguageTable

@inject IMapper<LangLinkModel, NavLinkData> LinkMapper

@implements IDisposable

<PageIsland IslandTitle="Highlights" id="high">
    <ChildContent>
        <Carousel FromJsonFile="./ProjectData/Projects.json"
                  DelayAmount="7000"
                  StartIdx="3"
                  HighLightRanges="@(new []{3..7, 1..3})"/>
    </ChildContent>
</PageIsland>

@if (_islandsData is not null)
{
    foreach (var island in _islandsData)
    {
        <PageIsland IslandTitle="@island.Title" id="@island.Id" Inverse="@island.Inverted">
            @if (island.Images is null)
            {
                <div style="padding: 0 0.7rem;">
                    @((MarkupString)island.HtmlContentString)
                </div>
            }
            else
            {
                <TwoView FlexValues="@(new ValueTuple<string, string>(island.FlexValues[0], island.FlexValues[1]))">
                    <FirstView>@((MarkupString)island.HtmlContentString)</FirstView>
                    <SecondView>
                        @{
                            var articleClassName = "two-view__img-article";
                            if (island.StickyImages) articleClassName += " sticky";
                        }
                        <article class="@articleClassName">
                            @foreach (var image in island.Images)
                            {
                                <LightboxImg
                                    BoundLightboxName="Welkom Lightbox"
                                    Registry="LightboxRegistry"
                                    class="hover-scale sc075"
                                    src="@image.Src"
                                    alt="@image.Atl"
                                    width="@image.Width"
                                    height="@image.Height"
                                    style="@image.ExtraCssStyles"/>
                            }
                        </article>
                    </SecondView>
                </TwoView>
            }
        </PageIsland>
    }
}


<PageIsland IslandTitle="Contact Me" id="contact">
    <ChildContent>
        <div style="display: flex; margin-top: 2rem;">
            <section
                style="
                width: 100%;
                max-width: var(--content-max-width-xs);
                margin: 0 auto;
                display: flex;
                flex-wrap: wrap;
                justify-content: space-evenly;">

                <a class="contact-link hover-scale"
                   href="https://www.linkedin.com/in/mitchel-vonk-87155024b/"
                   target="_blank"
                   style="flex-basis: 150px;">
                    <i class="bi bi-linkedin"
                       style="font-size: 4rem; color:  var(--accent-colour);">
                    </i> 
                    <span>LinkedIn</span>
                </a>

                <a class="contact-link hover-scale"
                   href="https://github.com/MitchelMA"
                   target="_blank"
                   style="flex-basis: 150px;">
                    <i class="bi bi-github"
                       style="font-size: 4rem; color: var(--accent-colour);">
                    </i>
                    <span>GitHub</span>
                </a>

                <a class="contact-link hover-scale"
                   href="mailto:vonkm124@gmail.com?SUBJECT=Reagerend%20op%20Portfolio"
                   target="_blank"
                   style="flex-basis: 150px;">
                    <i class="bi bi-mailbox2"
                       style="font-size: 4rem; color:  var(--accent-colour);">
                    </i>
                    <span>E-mail</span>
                </a>
            </section>
        </div>
    </ChildContent>
</PageIsland>

<Lightbox LightboxName="Welkom Lightbox"
          Registry="LightboxRegistry"/>

@code {

    private static NavLinkData[]? _links;

    private static readonly LinkTag PageIcon = new PageIcon("image/webp", "./images/AboutMeCroppedHead.webp");

    private static HeaderData _headerData = new()
    {
        ImagePath = StaticData.MainHeaderImgPath,
    };

    private PageIslandModel[]? _islandsData;

    private readonly ProjectMarkdown _projectMarkdown = new() {ExtraMode = true};

    protected override async Task OnInitializedAsync()
    {
        AppState.PageIcon = PageIcon;
        
        await LanguageTable.AwaitLanguageContentAsync(SetLangData);
        LanguageTable.LanguageChangedAsync += OnLanguageChanged;
    }
    
    private async Task OnLanguageChanged(object sender, int cultureIdx) => await SetLangData(sender);

    private async Task SetLangData(object? sender)
    {
        var currentData = await LanguageTable.GetAllPageData("index", false);
        if (currentData is null)
        {
            AppState.HeaderData = _headerData;
            await Console.Error.WriteLineAsync("Couldn't get Page Data in specified language!");
            return;
        }
        
        SetPageContent(currentData);
    }

    private void SetPageContent(LangPageData langPageData)
    {
        SetHeaderData(langPageData.HeaderData!.Value);
        SetLinksData(langPageData.LinksData!.Value); 
        SetIslandsData(langPageData.PageIslandsData!);
    }

    private void SetHeaderData(LangHeaderModel headerData)
    {
        _headerData.Title = headerData.Title;
        _headerData.UnderTitle = headerData.UnderTitle;
        _headerData.Description = headerData.Description;
        AppState.PageTitleExtension = " " + headerData.PageTitleExtension;
        AppState.HeaderData = _headerData;
    }

    private void SetLinksData(LangLinksModel linksData)
    {
        _links = new NavLinkData[linksData.Links.Length];
        for (var i = 0; i < linksData.Links.Length; i++)
            _links[i] = LinkMapper.MapFrom(linksData.Links[i]);

        AppState.Links = _links;
        AppState.MinNonStackedSize = linksData.MinWidth;
    }

    private void SetIslandsData(PageIslandModel[] islands)
    {
        _islandsData = islands;
        StateHasChanged();
    }

    public void Dispose()
    {
        LanguageTable.ManifestLoadedAsync -= SetLangData;
        LanguageTable.LanguageChangedAsync -= OnLanguageChanged;
    }
}