@page "/vertical-slice"
@using Portfolio.Model.Project
@using Portfolio.Client
@layout ProjectLayout

@inject AppState AppState
@inject ProjectState ProjectState
@inject LightboxRegistry Registry
@inject ProjectInfoGetter Getter;

<PageIsland IslandTitle="Rolverdeling" id="rol">
    <ChildContent>
        <article style="display: flex; justify-content: center;">
            <table class="styled-table">
                <thead>
                <tr>
                    <th>Namen</th>
                    <th>Rol</th>
                </tr>
                </thead>
                <tbody>

                <tr>
                    <td>Bas, Yana</td>
                    <td>Character art en animation</td>
                </tr>

                <tr>
                    <td>Stan</td>
                    <td>Environment art</td>
                </tr>

                <tr>
                    <td>Araysha</td>
                    <td>UI art</td>
                </tr>

                <tr>
                    <td>Dylan</td>
                    <td>Movement programming</td>
                </tr>

                <tr>
                    <td>Leon</td>
                    <td>Samenstellen prototype en programmeren trefballen gooien</td>
                </tr>

                <tr>
                    <td>Tijmen</td>
                    <td>Targeting systeem programeren</td>
                </tr>

                <tr>
                    <td>Ik</td>
                    <td>AI Programming, camera instellingen en boundaries</td>
                </tr>
                </tbody>
            </table>
        </article>
    </ChildContent>
</PageIsland>

<PageIsland IslandTitle="Showreel" id="reel">
    <ChildContent>
        <p>Dit is een showreel van tijdens development:</p>
        <video controls
               poster="./images/Unity_KFo5HjMIzQ.png"
               width="100%"
               style="border-radius: var(--border-radius-small)">

            <source
                src="./videos/DAReel.mp4"
                type="video/mp4"/>
        </video>
    </ChildContent>
</PageIsland>

<PageIsland IslandTitle="Camera Instellen" id="camera" Inverse="true">
    <ChildContent>
        <TwoView
            style="flex-wrap: wrap;"
            FlexValues="@(new("1 350px", "3 450px"))">

            <FirstView>
                <p>
                    Bij het instellen van de camera, heb ik het zo geschreven dat de character-sprites automatisch naar
                    de camera toe draaien.
                </p>
                <p>
                    Bij het instellen van de camera hoef je namelijk alleen maar een hoek door tegeven, en dan staat
                    de camera automatisch gedraaid, kijkend naar het goede punt.
                    Daarom is het ook makkelijk als de sprites ook gedraaid zijn naar de camera.
                </p>
                <p>
                    Omdat ik hiermee de hoek bereken tussen sprite en camera, kan ik ook tegelijkertijd corrigeren
                    voor de hoogte, waardoor de sprite nogsteeds op de grond staat.
                </p>
            </FirstView>

            <SecondView>
                <LightboxImg src="./images/FaceCam.png"
                             alt="Visual sheet van het naar de camera toe draaien"
                             style="max-width: 100%; position: sticky; top: 7rem; border-radius: var(--border-radius-small);"
                             class="hover-scale sc05"
                             BoundLightboxName="@nameof(VerticalSlice)"
                             Registry="Registry"/>

            </SecondView>

        </TwoView>
    </ChildContent>
</PageIsland>

<PageIsland IslandTitle="Boundaries" id="bounds">
    <ChildContent>
        <TwoView
            style="flex-wrap: wrap;"
            FlexValues="@(new("2 350px", "1 450px"))">
            
            <FirstView>
                <p>
                    Dit spel maakt ook gebruik van "bounds".<br/>
                    We hadden er namelijk voor gekozen om geen ingebouwde colliders te gebruiken van Unity.
                    Deze werkte namelijk niet goed voor wat wij deden waardoor de bal raar begon te doen.
                </p>
                <p>
                    Hier zie je een visual sheet van hoe het instellen van deze bounds eruit ziet.
                    Je hebt de outline die blauw is en de middelijn die rood is. Ook kan je hem verplaatsen door 
                    "Centre" te veranderen, wat een 2 dimensionale vector is.
                </p>
                <p>
                    Ook zijn er dingen toegevoegd om te zorgen dat alle dingen die bewegen automatisch rekening
                    houden met deze ingestelde bounds.
                    En ook kan je de bounds ophalen van aan welke kant je staat (rechts of links).
                    Dit omdat de middelijn ook ingesteld kan worden.
                </p>
            </FirstView>
            <SecondView>
                <LightboxImg src="./images/Bounds.png"
                             alt="Visual sheet van het instellen van de boundaries"
                             style="max-width: 100%; position: sticky; top: 7rem; border-radius: var(--border-radius-small);"
                             class="hover-scale sc05"
                             BoundLightboxName="@nameof(VerticalSlice)"
                             Registry="Registry"/>

            </SecondView>
        </TwoView>
    </ChildContent> 
</PageIsland>

<Lightbox LightboxName="@nameof(VerticalSlice)"
          Registry="Registry"/>

@code {

    private static readonly NavLinkData[] Links =
    {
        new("#rol", "Rolverdeling"),
        new("#reel", "Showreel"),
        new("#camera", "Camera"),
        new("#bounds", "Boundaries"),
    };

    private static ProjectDataModel? _model;
    private static readonly PageDetails PageDetails = new();
    private static readonly HeaderData HeaderData = new();

    protected override async Task OnInitializedAsync()
    {
        _model = await Getter.GetCorrespondingToUri();

    // setup of page-details
        PageDetails.Links = Links;
        PageDetails.Icon = StaticData.DefaultPageIcon;
        PageDetails.ShowFooter = true;
        PageDetails.TitleExtension = _model?.TitleExtension;
        PageDetails.MinNonStackedSize = 700;

    // setup of header data
        HeaderData.Title = _model?.Header.HeaderTitle;
        HeaderData.ImagePath = _model?.Header.HeaderImage;
        HeaderData.UnderTitle = _model?.Header.UnderTitle;

        AppState.PageDetails = PageDetails;
        AppState.HeaderData = HeaderData;

        ProjectState.ProjectStatus = _model?.Status ?? ProjectStatus.Finished;
        ProjectState.PageEndGithub = _model?.GitHub;
    }

}