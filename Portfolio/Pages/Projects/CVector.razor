@page "/cvector"
@using Portfolio.Model.Text
@layout ProjectLayout

@inject LightboxRegistry LbRegistry
@inject AppState AppState
@inject ProjectState ProjectState
@inject ProjectInfoGetter PInfoGetter
@inject LanguageTable LTable
@inject LangTablePreCacher PreCacher

@inject IMapper<LangHeaderModel, HeaderData> HeaderMapper
@inject IMapper<LangLinkModel, NavLinkData> LinkMapper

@using Portfolio.Model.Project
@using Portfolio.Client
@using Portfolio.Mappers

@implements IDisposable

@if (_islandsData is not null)
{
    foreach (var island in _islandsData)
    {
        <PageIsland IslandTitle="@island.Title" id="@island.Id" Inverse="@island.Inverted">
            @if (island.Images is null)
            {
                <div style="padding: 0 0.7rem;">
                    @((MarkupString)island.HtmlContentString)
                </div>
            }
            else
            {
                <TwoView FlexValues="@(new ValueTuple<string, string>(island.FlexValues[0], island.FlexValues[1]))">
                    <FirstView>@((MarkupString)island.HtmlContentString)</FirstView>
                    <SecondView>
                        @{
                            var articleClassName = "two-view__img-article";
                            if (island.StickyImages) articleClassName += " sticky";
                        }
                        <article class="@articleClassName">
                            @foreach (var image in island.Images)
                            {
                                <LightboxImg
                                    BoundLightboxName="@nameof(CVector)"
                                    Registry="LbRegistry"
                                    class="hover-scale sc075"
                                    src="@image.Src"
                                    alt="@image.Atl"
                                    width="@image.Width"
                                    height="@image.Height"
                                    style="@image.ExtraCssStyles"/>
                            }
                        </article>
                    </SecondView>
                </TwoView>
            }
        </PageIsland>
    }
}

<Lightbox
    LightboxName="@nameof(CVector)"
    Registry="LbRegistry" />

@code {

    private static ProjectDataModel? _model;
    private static NavLinkData[]? _links;
    private static PageIslandModel[]? _islandsData;

    protected override async Task OnInitializedAsync()
    {
        PreCacher.Extra = new[] {"./index"};
        _model = await PInfoGetter.GetCorrespondingToUri();
        ProjectState.PageEndGithub = _model?.GitHub;

        AppState.PageIcon = StaticData.DefaultPageIcon;
        AppState.ShowFooter = true;

        LTable.LanguageChangedAsync += OnLanguageChanged;
        await LTable.AwaitLanguageContentAsync(SetLangData);
    }

    private Task OnLanguageChanged(object? sender, int newCulture) => SetLangData(sender);

    private async Task SetLangData(object? sender)
    {
        var currentData = await LTable.LoadAllCurrentPageData();
        if (currentData is null)
        {
             await Console.Error.WriteLineAsync("Couldn't get Page Data in specified language!");
             return;           
        }

        SetPageContent(currentData);
        await PreCacher.PreCache(AppState.CurrentLanguage);
    }

    private void SetPageContent(LangPageData pageData)
    {
        SetHeaderData(pageData.HeaderData!.Value);
        SetLinksData(pageData.LinksData!.Value);
        SetIslandsData(pageData.PageIslandsData!);
    }

    private void SetHeaderData(LangHeaderModel headerData)
    {
        var header = HeaderMapper.MapFrom(headerData);
        header.ImagePath = _model!.Value.Header.HeaderImage;
        AppState.HeaderData = header;
        AppState.PageTitleExtension = " " + headerData.PageTitleExtension;
    }

    private void SetLinksData(LangLinksModel linksData)
    {
        var l = linksData.Links.Length;
        _links = new NavLinkData[l];
        for (var i = 0; i < l; i++)
            _links[i] = LinkMapper.MapFrom(linksData.Links[i]);

        AppState.Links = _links;
        AppState.MinNonStackedSize = linksData.MinWidth;
    }

    private void SetIslandsData(PageIslandModel[] islandsData)
    {
        _islandsData = islandsData;
        StateHasChanged();
    }

    public void Dispose()
    {
        LTable.LanguageChangedAsync -= OnLanguageChanged;
        LTable.ManifestLoadedAsync -= SetLangData;
    }
}