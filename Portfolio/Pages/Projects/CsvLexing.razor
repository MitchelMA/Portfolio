@page "/csv-lexer"
@using Portfolio.Model.Project
@using Portfolio.Model.Text
@using Portfolio.Client
@layout ProjectLayout

@inject LightboxRegistry Registry
@inject AppState AppState
@inject ProjectState ProjectState
@inject ProjectInfoGetter Getter
@inject LanguageTable LanguageTable

<PageIsland IslandTitle="Introductie" id="iductie">
    <ChildContent>
        <TwoView FlexValues="@(new("3 350px", "1 350px"))">
            <FirstView>
                <p>
                    Csv,
                    <a href="https://nl.wikipedia.org/wiki/Kommagescheiden_bestand" target="_blank">comma-seperated values</a>,
                    is een lightweight bestands format om gegevens in op te slaan. Het kan bijvoorbeeld gebruikt worden om waardes te kunnen mappen
                    (input waarde die gebonden is aan een output waarde). Ik maak er ook gebruik van in dit project om
                    kleurecodes toe te passen op de indicator die je linksonderin ziet.
                </p>
            </FirstView>

            <SecondView>
                <article class="two-view__img-article sticky">
                    <LightboxImg
                        class="hover-scale sc05"
                        src="./images/rider64_6CXTNg5dUr.png"
                        alt="voorbeeld van een .csv bestand"
                        style="max-width:100%;"
                        BoundLightboxName="@nameof(CsvLexing)"
                        Registry="Registry"/>
                </article>
            </SecondView>
        </TwoView>
    </ChildContent>
</PageIsland>
<PageIsland IslandTitle="Standaard" id="stand">
    <ChildContent>
        <p>
            Er is op het moment wel een idee voor een "officiële"
            <a href="https://datatracker.ietf.org/doc/html/rfc4180">definitie (RFC 4180)</a>
            voor .csv bestanden, maar over het algemeen wordt hier vaak van afgeweken.
        </p>
        <hr/>
        <p>
            De standaarden zijn als volgt:
        </p>
        <ul>
            <li>Csv is gewone tekst, net zoals .txt bestandjes op computers</li>
            <li>Het bestaat uit aantekeningen (1 per regel is gebruikelijk)</li>
            <li>
                De aantekening van een regel zijn opgesplits in stukjes middels een scheidingsteken (dit is gebruikelijk
                één teken als een komma)
            </li>
            <li>Elke aantekening heeft de zelfde volgorde van soort gegevens per stukje</li>
            <li>
                Een
                `<a href="https://developer.mozilla.org/en-US/docs/Glossary/String" target="_blank">string</a>`
                wordt geöpend en gesloten met een aanhalingsteken, en mag voorbij het einde van een regel lopen
            </li>
            <li>
                In het geval dat je een aanhalingsteken wilt opnemen in een string, gebruik je er twee achter elkaar:
                "John ""Doe""" = John "Doe". Dit heet een
                <a href="https://en.wikipedia.org/wiki/Escape_sequence" target="_blank">escape sequence</a>
            </li>
        </ul>
        <hr/>
        <p>
            Op het moment wijk ik ook af van deze standaard. Ik heb iets toegevoegd als `Comments`, kleine stukjes tekst
            die bedoelt zijn om de code te verduidelijken.
        </p>
    </ChildContent>
</PageIsland>
<PageIsland IslandTitle="Voorbeeld" id="ex">
    <ChildContent>
        <TwoView FlexValues="@(new("2 300px", "3 400px"))">
            <FirstView>
                <p>
                    Ik heb ook nog een klein voorbeeld om aan te geven hoe dit er precies uitziet.
                    Het eerste plaatje is het csv-bestandje en het tweede plaatje een voorbeeld van hoe ik het kan 
                    uitlezen in code.
                    Dit wordt ook wel een model genoemd.
                </p>
            </FirstView>

            <SecondView>
                <article class="two-view__img-article">
                    
                    <LightboxImg class="hover-scale sc05"
                                 src="./images/rider64_6CXTNg5dUr.png"
                                 alt="Voorbeeld van .csv waardes"
                                 style="max-width: 100%;"
                                 BoundLightboxName="@nameof(CsvLexing)"
                                 Registry="Registry"/>

                    <LightboxImg class="hover-scale sc05"
                                 src="./images/rider64_DgcDDkJOS9.png"
                                 alt="Voorbeeld van een model in code"
                                 style="max-width: 100%;"
                                 BoundLightboxName="@nameof(CsvLexing)"
                                 Registry="Registry"/>
                    
                </article>
            </SecondView>
        </TwoView>
    </ChildContent>
</PageIsland>

<Lightbox LightboxName="@nameof(CsvLexing)"
          Registry="Registry"/>

@code {

    private static ProjectDataModel? _model;
    private static NavLinkData[]? _links;

    protected override async Task OnInitializedAsync()
    {
        _model = await Getter.GetCorrespondingToUri();
        
    // project data
        ProjectState.PageEndGithub = _model?.GitHub;
        ProjectState.ProjectStatus = _model?.Status ?? ProjectStatus.Finished;
        
        await LoadLanguageContent();

        AppState.PageIcon = StaticData.DefaultPageIcon;
        AppState.ShowFooter = true;
    }

    private async Task LoadLanguageContent()
    {
        if (LanguageTable.IsLoaded)
        {
            await SetLangData();
            return;
        }

        LanguageTable.ManifestLoadedAsync += OnManifestLoaded;
    }

    private async Task SetLangData()
    {
        var currentData = await LanguageTable.LoadAllCurrentPageData();
        if (currentData is null)
        {
            await Console.Error.WriteLineAsync("Couldn't get Page Data in specified language!");
            return;
        }
        
        SetPageContent(currentData);
    }

    private void SetPageContent(LangPageData langPageData)
    {
        SetHeaderData(langPageData.HeaderData!.Value);
        SetLinksData(langPageData.LinksData!.Value);
    }

    private void SetHeaderData(LangHeaderModel headerData)
    {
        var header = new HeaderData()
        {
            Description = headerData.Description,
            ExtraStyles = null,
            ImagePath = _model!.Value.Header.HeaderImage,
            Title = headerData.Title,
            UnderTitle = headerData.UnderTitle,
        };
        AppState.HeaderData = header;
        AppState.PageTitleExtension = " " + headerData.PageTitleExtension;
    }

    private void SetLinksData(LangLinksModel linksData)
    {
        _links = new NavLinkData[linksData.Links.Length];
        for (var i = 0; i < linksData.Links.Length; i++)
        {
            var cur = linksData.Links[i];
            _links[i] = new NavLinkData(cur.Href, cur.DisplayText, cur.OpensNew);
        }

        AppState.Links = _links;
        AppState.MinNonStackedSize = linksData.MinWidth;
    }

    private async Task OnManifestLoaded(object? sender)
    {
        LanguageTable.ManifestLoadedAsync -= OnManifestLoaded;
        await SetLangData();
    }

}