@inherits LayoutComponentBase

@inject AppState AppState;
@inject ProjectState ProjectState;
@inject ColourMapperFactory MapperFactory;

@using Portfolio.ColourMapper
@using System.Drawing

@implements IDisposable;

<div class="page">
    <TopHeader HeaderImg="@AppState.HeaderImgPath"
               Title="@AppState.HeaderTitle"
               UnderTitle="@AppState.HeaderUnderTitle"
               ScrollToId="main_content"
               Style="@AppState.HeaderExtraStyles"/>

    <TopNav Links="@AppState.Links"/>

    <main class="main-content" id="main_content">
        <div class="main-content__inner">
            @Body
        </div>
    </main>

    @if (AppState.ShowFooter)
    {
        <Footer>
            <MainSection>
                <h5 style="margin-bottom: 0">Mitchel Vonk©</h5>
            </MainSection>
        </Footer>
    }

    <ToTopBtn/>
</div>

@code {

    private Mapper<ProjectStatus>? _projMapper;
    private Color? _statusColour;

    public Color? StatusColour
    {
        get => _statusColour;
        set
        {
            _statusColour = value;
            StateChanged();
        }
    }

    protected override void OnInitialized()
    {
        AppState.StateChanged += StateChanged;
        ProjectState.StateChanged += ProjectStateChanged;
        AppState.ShowFooter = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _projMapper = await MapperFactory.CreateMap<ProjectStatus>("./ColourMaps/ProjectStatusMap.csv");
        StatusColour = _projMapper?.GetColour(ProjectState.ProjectStatus);
    }

    public void Dispose()
    {
        AppState.StateChanged -= StateChanged;
        ProjectState.StateChanged -= ProjectStateChanged;
    }

    private void StateChanged()
    {
        StateHasChanged();
    }

    private void ProjectStateChanged()
    {
        StatusColour = _projMapper?.GetColour(ProjectState.ProjectStatus);
    }

}