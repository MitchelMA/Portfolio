@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable

<nav class="topnav @ShownClass" data-non-stacked-size="@MinNonStackedSize">
    <div class="topnav__inner-container">

        <div class="topnav__nav-header">
            @if (Links is not null && Links.Length > 0)
            {
                <button class="nav-header__burger" @onclick="ToggleNav">
                    <span class="burger__bars"></span>
                </button>
            }

            <a class="nav-header__brand hover-scale sc05" href="" @onclick="ForceClose">
                <img src="./images/AboutMeCroppedHead.webp" alt="nav-header" height="50"/>
                <div class="brand__profile">
                    <span class="profile__name">Mitchel Vonk</span>
                    <span class="profile__pp">.NET programmer</span>
                </div>
            </a>
        </div>

        @if (Links is not null && Links.Length > 0)
        {
            <ul class="topnav__nav-links clearfix" style="height: @(NavHeight)px; padding-top: @(OpenTopPadding)px;">
                @for (int i = 0; i < Links.Length; i++)
                {
                    <li class="nav-links__nav-item clearfix">
                        @{
                            var (href, display, navigationType) = Links[i];
                        }
                        <AnchorLink
                            class=@("nav-item__nav-link hover-scale sc05 " + (navigationType != NavigationType.Stays ? "outgoing" : string.Empty))
                            href="@href"
                            @onclick="ForceClose"
                            target=@(navigationType == NavigationType.External ? "_blank" : null)>
                            @display
                        </AnchorLink>
                    </li>
                }
            </ul>
        }
    </div>
</nav>

@code {

    [Parameter]
    public NavLinkData[]? Links { get; set; }

    [Parameter]
    public int MinNonStackedSize { get; set; } = 950;

    [Parameter]
    public int StackedTopPadding { get; set; }

    private bool _navCollapsed = true;
    private int? ElementsHeight => 56 * Links?.Length;

    private string? ShownClass => _navCollapsed ? null : "shown";
    private int? NavHeight => _navCollapsed ? 0 : ElementsHeight + StackedTopPadding;
    private int? OpenTopPadding => _navCollapsed ? 0 : StackedTopPadding;

    public bool NavCollapsed
    {
        get => _navCollapsed;
        set
        {
            if (value == _navCollapsed)
                return;

            _navCollapsed = value;
            StateHasChanged();
        }
    }

    private void ToggleNav()
    {
        NavCollapsed = !NavCollapsed;
    }

    private void ForceClose()
    {
        NavCollapsed = true;
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("checkTopNav");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var location = e.Location;
        var uri = NavigationManager.ToAbsoluteUri(location);
        var fragment = uri.Fragment;

        var elementId = fragment.StartsWith('#') ? fragment[1..] : fragment;

        await ScrollToElementId(elementId);
    }

    private async Task ScrollToElementId(string elementId)
    {
        await JsRuntime.InvokeVoidAsync("scrollToId", elementId, 50);
    }

}