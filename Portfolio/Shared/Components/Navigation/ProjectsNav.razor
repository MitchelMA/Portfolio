@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject ProjectInfoGetter Getter
@inject LanguageTable LangTable;
@inject AppState AppState;

@using Portfolio.Model.Project
@using Portfolio.Model.Text
@implements IDisposable

<div class="proj-nav">
    <section class="proj-nav__header">
        @if (GitHubLink is not null)
        {
            <a href="@GitHubLink" target="_blank">GitHub</a>
        }
        <h3 class="proj-nav__head">Projects</h3>
    </section>
    <ul class="proj-nav__projects">
        @{
            int idx = 0;
            if (_models is not null && _titles is not null)
            {
                foreach (var pair in _models)
                {
                    var model = pair.Value;
                    bool isCur = idx == _projectIdx;
                    string? active = isCur ? "active" : null;
                    string? href = isCur ? null : model.LocalHref;

                    <li class="projects__proj @active">
                        <a class="hover-scale sc075" href="@href">@(_titles[idx])</a>
                    </li>

                    idx++;
                }
            }
        }
    </ul>
    <section class="proj-nav__header">
        <h3 class="proj-nav__head">Tags</h3>
    </section>
    <ul class="proj-nav__tags">
        @if (_individualTags is not null)
        {
            foreach (var tag in _individualTags)
            {
                <li class="tags__tag">
                    <TagItem Tag="tag" />
                </li>
            }
        }
    </ul>
</div>


@code {

    [Parameter]
    public string? GitHubLink { get; set; }

    private int _projectIdx;
    private IReadOnlyDictionary<string, ProjectDataModel>? _models;
    private string[]? _titles;
    private ProjectTags[]? _individualTags;

    protected override async Task OnInitializedAsync()
    {
        await Getter.RetrieveData();
        NavManager.LocationChanged += OnLocationChanged;
        _models = Getter.Data;
        GetProjIdx();
        await LangTable.AwaitLanguageContentAsync(OnManifestLoaded);
        LangTable.LanguageChangedAsync += OnLanguageChanged;
        StateHasChanged();
    }

    private void GetProjIdx()
    {
        var path = "./" + NavManager.ToBaseRelativePath(NavManager.Uri).Split('#')[0];
        _projectIdx = _models!.Keys.ToList().IndexOf(path);
        if(_projectIdx is not -1)
            _individualTags = _models[path].Tags.ExtractFlags().ToArray();
    }

    private async Task<string[]?> GetProjectTitles()
    {
        var uris = Getter.Data.Keys.ToArray();
        var length = uris.Length;
        var titles = new string[uris.Length];

        for (var i = 0; i < length; i++)
        {
            var headerData = await LangTable.LoadHeaderForPage(uris[i], AppState.CurrentLanguage);
            if (headerData is null)
                return default;
            titles[i] = headerData.Value.Title;
        }

        return titles;
    }

    private async Task OnManifestLoaded(object? sender)
    {
        _titles = await GetProjectTitles();
        StateHasChanged();
    }

    private async Task OnLanguageChanged(object? sender, int newLangIdx)
    {
        _titles = await GetProjectTitles();
        StateHasChanged();
    }
    

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        GetProjIdx();
        StateHasChanged();
    }


    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
        LangTable.ManifestLoadedAsync -= OnManifestLoaded;
        LangTable.LanguageChangedAsync -= OnLanguageChanged;
    }

}