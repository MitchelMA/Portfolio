@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject ProjectInfoGetter Getter

@using Portfolio.Model.Project
@implements IDisposable

<div class="proj-nav">
    <section class="proj-nav__header">
        @if (GitHubLink is not null)
        {
            <a href="@GitHubLink" target="_blank">GitHub</a>
        }
        <h3 class="proj-nav__head">Projects</h3>
    </section>
    <ul class="proj-nav__projects">
        @{
            int idx = 0;
            if (_models is not null)
            {
                foreach (var pair in _models)
                {
                    var model = pair.Value;
                    bool isCur = idx == _projectIdx;
                    string? active = isCur ? "active" : null;
                    string? href = isCur ? null : model.LocalHref;

                    <li class="projects__proj @active">
                        <a class="hover-scale sc075" href="@href">@(model.Header.HeaderTitle)</a>
                    </li>

                    idx++;
                }
            }
        }
    </ul>
</div>


@code {

    [Parameter]
    public string? GitHubLink { get; set; }

    private int _projectIdx;
    private IReadOnlyDictionary<string, ProjectDataModel>? _models;

    protected override async Task OnInitializedAsync()
    {
        await Getter.RetrieveData();
        NavManager.LocationChanged += OnLocationChanged;
        _models = Getter.Data;
        foreach (var pair in _models)
        {
            Console.WriteLine(pair.Value.Header.HeaderTitle);
        }
        GetProjIdx();
        StateHasChanged();
    }

    private void GetProjIdx()
    {
        string path = "./" + NavManager.ToBaseRelativePath(NavManager.Uri).Split('#')[0];
        _projectIdx = _models!.Keys.ToList().IndexOf(path);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        GetProjIdx();
        StateHasChanged();
    }


    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }

}