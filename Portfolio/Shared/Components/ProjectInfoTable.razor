@using Portfolio.Model.Project
@using Portfolio.Model.Text

@inject LanguageTable LangTable;

@implements IDisposable

<table class="styled-table">
    <thead>
    <tr>
        <th>@_headerModel?.DurationText</th>
        <th>@_headerModel?.GroupSizeText</th>
        <th>@_headerModel?.SoftwareText</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>@DurationDisplayText</td>
        <td>@Model?.Planning.PeopleCount</td>
        <td>@Model?.Planning.Software</td>
    </tr>
    </tbody>
</table>

@code {
    
    [Parameter]
    public ProjectDataModel? Model { get; set; }

    private InfoTableHeaderModel? _headerModel;
    private DurationTextsModel? _durationTexts;
    private string? DurationDisplayText
    {
        get
        {
            if (Model is null || _headerModel is null || _durationTexts is null)
                return null;

            bool isPlural = Model.Value.Planning.Duration > 1;
            string[] textGroup = _durationTexts.Value.Singular;
            if (isPlural)
                textGroup = _durationTexts.Value.Plural;

            return $"{Model.Value.Planning.Duration} {textGroup[(int)Model.Value.Planning.DurationType]}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LangTable.LanguageChangedAsync += OnLanguageChanged;
        await LangTable.AwaitLanguageContentAsync(SetLangData);
    }

    private async Task SetLangData(object? sender)
    {
        _headerModel = await LangTable.LoadCurrentInfoTableData();
        _durationTexts = await LangTable.LoadCurrentDurationTexts();
        if (_headerModel is null || _durationTexts is null)
            await Console.Error.WriteLineAsync("Couldn't load the language content for the project-info-table");
    }

    private async Task OnLanguageChanged(object? sender, int newLangCode) =>
        await SetLangData(sender);


    public void Dispose()
    {
        LangTable.ManifestLoadedAsync -= SetLangData;
        LangTable.LanguageChangedAsync -= OnLanguageChanged;
    }

}