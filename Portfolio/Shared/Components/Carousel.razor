@using System.Text.Json
@using Portfolio.Mappers
@using Portfolio.Model.Project
@using System.Collections
@inject HttpClient HttpClient
@inject LanguageTable LanguageTable
@inject AppState AppState
@inject IMapper<ProjectDataModel, CarouselModel> Mapper

@implements IDisposable

<div class="carousel" style="background-image: url(@(CurrentModel?.Background)); @TransitionString">
    <div class="carousel__overlay"></div>
    <a class="carousel__inner" href="@CurrentModel?.Href">
        <section class="carousel__header-container">
            <h3 class="header-container__header switch @ActiveClass(!_toggle)">@_togglesHeader[0]</h3>
            <h3 class="header-container__header switch @ActiveClass(_toggle)">@_togglesHeader[1]</h3>
        </section>
        <article class="carousel__text-container"
                 style="@HeightString">
            <p class="text-container__text switch @ActiveClass(!_toggle)">@_togglesText[0]</p>
            <p class="text-container__text switch @ActiveClass(_toggle)">@_togglesText[1]</p>
        </article>
    </a>
    <div class="carousel__tags-display">
        @if (CurrentModel is not null)
        {
            var indTags = CurrentModel.Value.Tags.ExtractFlags();
            foreach (var tag in indTags)
            {
                <TagItem Tag="tag" SizeModifier="medium" />
            }
        }
    </div>
    <div class="carousel__dots-holder">
        @if (UsedModels?.Length > 1)
        {
            @for (var i = 0; i < UsedModels?.Length; i++)
            {
                var idx = i;
                <input type="radio" checked="@(idx == CurrentIdx)"
                       title="@UsedModels[idx].HeaderData.Title"
                       @onclick="() => { RadioClick(idx); }"/>
            }
        }
    </div>
    <div class="carousel__buttons-holder">
        @{
            var nextIdx = (CurrentIdx + 1) % UsedModels?.Length ?? 0;
            var prevIdx = CurrentIdx - 1;
            if (prevIdx < 0)
                prevIdx = UsedModels?.Length - 1 ?? 0;
        }
        <button class="btn btn-prev"
                @onclick="() => { RadioClick(CurrentIdx - 1); }"
                title="@UsedModels?[prevIdx].HeaderData.Title">
            <i class="bi bi-arrow-left-circle-fill"></i>
        </button>
        <button class="btn btn-next"
                @onclick="() => { RadioClick(CurrentIdx + 1); }"
                title="@UsedModels?[nextIdx].HeaderData.Title">
            <i class="bi bi-arrow-right-circle-fill"></i>
        </button>
    </div>
</div>

@code {

    private string? _fromJsonFile;
    private CarouselModel[]? _allModels;
    private CarouselModel[]? _highlightedModels;
    private Range[]? _highLightRanges;
    private int _index;
    private bool _toggle = false;
    private string[] _togglesText = { "", "" };
    private string[] _togglesHeader = { "", "" };

    private int _delay;
    private bool _disposed = false;
    private CancellationTokenSource _cts = new();
    private Stack<object> _clickStack = new();

    private CarouselModel[]? UsedModels => _highLightRanges is null ? _allModels : _highlightedModels;

    /// <summary>
    /// The Starting index of the carousel
    /// </summary>
    [Parameter]
    public int StartIdx
    {
        set => _index = value;
    }

    /// <summary>
    /// The carousel-data
    /// </summary>
    [Parameter]
    public CarouselModel[] CarouselData
    {
        set
        {
            if (_allModels is not null)
                return;

            _allModels = value;
        }
    }

    /// <summary>
    /// The file from which the carousel-data gets loaded
    /// </summary>
    [Parameter]
    public string? FromJsonFile
    {
        set => _fromJsonFile = value;
    }

    /// <summary>
    /// The delay in milliseconds
    /// </summary>
    [Parameter]
    public int DelayAmount
    {
        get => _delay;
        set
        {
            if (_delay != 0)
                return;

            _delay = value;
        }
    }

    /// <summary>
    /// The duration of the transition in between slide
    /// </summary>
    [Parameter]
    public int? TransitionDuration { get; set; }
    
    [Parameter]
    public Range[]? HighLightRanges 
    { 
        get => _highLightRanges;
        set
        {
            if (value?.Equals(_highLightRanges) ?? false)
                return;

            _highLightRanges = value;
            ApplyRangeFilter(_highLightRanges);
        }
        
    }

    private float DynamicDelayAmount => DelayAmount / Math.Max(_clickStack.Count * 1.5f, 1f);

    private int CurrentIdx
    {
        get => _index;
        set
        {
            if (value < 0)
                value = UsedModels!.Length - 1;

            value %= UsedModels!.Length;
            _index = value;
        }
    }

    private CarouselModel? CurrentModel => UsedModels?[CurrentIdx];

    private string? HeightString =>
        CurrentModel?.SetHeight is not null ?
            $"height: {CurrentModel?.SetHeight};" : null;

    private string? TransitionString =>
        TransitionDuration is not null ?
            $"--transition-duration: {TransitionDuration}ms;" : null;

    private string? ActiveClass(bool toggle) => toggle ? "active" : null;

    protected override async Task OnInitializedAsync()
    {
        await GetCarouselModels();
    }

    private void ScrollThrough(int nextIdx)
    {
        int prevIdx = CurrentIdx;
        CurrentIdx = nextIdx;
        bool noChanges = prevIdx == nextIdx;

        int toToggleIdx = Convert.ToInt32(noChanges ? _toggle : !_toggle);
        _togglesHeader[toToggleIdx] = CurrentModel?.HeaderData.Title!;
        _togglesText[toToggleIdx] = CurrentModel?.HeaderData.Description!;

        if (!noChanges)
            _toggle = !_toggle;

        StateHasChanged();
    }

    private void RadioClick(int nextIdx)
    {
        _clickStack.Push(1);
        ScrollThrough(nextIdx);
    }

    private async Task AutoLoop(CancellationToken token)
    {
        while (!_disposed && !token.IsCancellationRequested)
        {
            await Task.Delay((int)DynamicDelayAmount, token);
            if (_clickStack.Count > 0)
            {
                _clickStack.Pop();
                continue;
            }

            ScrollThrough(CurrentIdx + 1);
        }
    }

    private async Task GetCarouselModels()
    {
        if (_fromJsonFile is null)
            return;

        LanguageTable.LanguageChangedAsync += OnLanguageChanged;
        await LanguageTable.AwaitLanguageContentAsync(SetLangData);
    }
    
    private void ApplyRangeFilter(Range[]? filter)
    {
        if (_highLightRanges?.Overlaps() ?? false)
            throw new ArgumentException("Ranges may not overlap", nameof(filter));
        
        if (_allModels is null)
            return;

        if (filter is null)
            _highlightedModels = _allModels;

        var highlightedList = new List<CarouselModel>();
        var filterCount = filter!.Length;
        for (var i = 0; i < filterCount; i++)
            highlightedList.AddRange(_allModels[filter[i]]);
        _highlightedModels = highlightedList.ToArray();
        
        StateHasChanged();
    }
    
    private async Task SetLangData(object? sender)
    {
        List<CarouselModel> data = new();
        var tmp = await HttpClient.GetFromJsonAsync<ProjectDataModel[]>(_fromJsonFile);
        var langCode = AppState.CurrentLanguage;

        var l = tmp?.Length ?? 0;
        for (var i = 0; i < l; i++)
        {
            var cur = tmp![i];
            var model = Mapper.MapFrom(cur);
            model.HeaderData = (await LanguageTable.LoadHeaderForPage(model.Href!, langCode))!.Value;
            data.Add(model);
        }
        _allModels = data.ToArray();
        ApplyRangeFilter(_highLightRanges);
        
        ScrollThrough(CurrentIdx);

        if (_delay != 0 && _allModels?.Length > 1)
            await AutoLoop(_cts.Token);
    }

    private async Task OnLanguageChanged(object? sender, int nextLangIdx) => await SetLangData(sender);

    public void Dispose()
    {
        _disposed = true;
        _cts.Cancel();
        _cts.Dispose();
        LanguageTable.ManifestLoadedAsync -= SetLangData;
        LanguageTable.LanguageChangedAsync -= OnLanguageChanged;
    }

}