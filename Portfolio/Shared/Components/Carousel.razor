@using System.Text.Json
@inject HttpClient HttpClient

<div class="carousel" style="background-image: url(@(CurrentModel?.Background))">
    <div class="carousel__overlay"></div>
    <div class="carousel__inner">
        <section class="carousel__header-container">
            <h3 class="header-container__header switch @ActiveClass(!_toggle)">@_togglesHeader[0]</h3>
            <h3 class="header-container__header switch @ActiveClass(_toggle)">@_togglesHeader[1]</h3>
        </section>
        <article class="carousel__text-container">
            <p class="text-container__text switch @ActiveClass(!_toggle)">@_togglesText[0]</p>
            <p class="text-container__text switch @ActiveClass(_toggle)">@_togglesText[1]</p>
        </article>
    </div>
    <div class="carousel__dots-holder">
        @for (int i = 0; i < _models?.Length; i++)
        {
            var idx = i;
            <input type="radio" checked="@(idx == CurrentIdx)" name="d_dot_@_guid"
                   @onclick="() => { ScrollThrough(idx); }"/>
        }
    </div>
</div>

@code {

    private Guid _guid = Guid.NewGuid();

    private CarouselModel[]? _models;
    private int _index;
    private bool _toggle = false;
    private string[] _togglesText = { "", "" };
    private string[] _togglesHeader = { "", "" };

    private string? ActiveClass(bool toggle) => toggle ? "active" : null;

    [Parameter]
    public int StartIdx
    {
        set => CurrentIdx = value;
    }

    [Parameter]
    public CarouselModel[] CarouselData
    {
        set
        {
            if (_models is not null)
                return;

            _models = value;
            Loaded();
        }
    }

    [Parameter]
    public string FromJsonFile
    {
        set
        {
            if (_models is not null)
                return;

            Task.Run(async () => await FromJson(value));
        }
    }

    private int CurrentIdx
    {
        get => _index;
        set
        {
            if (value < 0)
                value = _models!.Length - 1;

            value %= _models!.Length;
            _index = value;
        }
    }

    private CarouselModel? CurrentModel => _models?[CurrentIdx];

    private async Task FromJson(string file)
    {
        try
        {
            _models = await HttpClient.GetFromJsonAsync<CarouselModel[]>(file);
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e);
        }
        Console.WriteLine(JsonSerializer.Serialize(_models));
        Loaded();
    }

    private void ScrollThrough(int nextIdx)
    {
        int prevIdx = CurrentIdx;
        CurrentIdx = nextIdx;
        bool noChanges = prevIdx == nextIdx;
        int prevToggleIdx = Convert.ToInt32(_toggle);
        int nextToggleIdx = noChanges ? prevToggleIdx : (prevToggleIdx + 1) % 2;

        _togglesHeader[nextToggleIdx] = CurrentModel?.Header!;
        _togglesText[nextToggleIdx] = CurrentModel?.Text!;
        if(!noChanges)
            _toggle = !_toggle;
        
        StateHasChanged();
    }

    private void Loaded()
    {
        ScrollThrough(_index);
    }
}