@using Portfolio.Services
@inject LightboxRegistry Registry

@implements IDisposable

<img @attributes="@Attributes" @onclick="ClickHandle" />

@code {
    private int _idx = -1;
    
    [Parameter]
    public int Idx
    {
        get => _idx;
        set
        {
            if (_idx != -1)
                return;

            _idx = value;
        }
    }

    [Parameter]
    public string? BoundLightboxName { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    protected override void OnInitialized()
    {
        Registry.Registered += Registered;
        Registry.OverWritten += Registered;
        
        // Force register when the Lightbox itself registered before this was initialized
        var value = Registry.Get(BoundLightboxName!);
        if (!value.succes)
            return;
        
        RegisterToLightbox(value.box!);
    }

    private void Registered(LightboxRegistry sender, Lightbox lightbox)
    {
        RegisterToLightbox(lightbox);
    }

    private void RegisterToLightbox(Lightbox lightbox)
    {
         if (BoundLightboxName is null)
             throw new NullReferenceException($"{nameof(BoundLightboxName)} may not be null");
             
         if (lightbox.LightboxName != BoundLightboxName)
             return;
         
         var value = lightbox.TryRegisterImage(this);
         if (!value.succes)
             return;
 
         Idx = value.idx;       
    }

    private void ClickHandle()
    {
        var box = Registry.Get(BoundLightboxName!);
        if (!box.succes)
            throw new Exception($"Name \"{BoundLightboxName}\" not found in scoped {nameof(LightboxRegistry)}");
        
        if (Attributes is null)
            return;
        
        box.box?.OpenAt(Idx);
    }

    public void Dispose()
    {
        Registry.Registered -= Registered;
        Registry.OverWritten -= Registered;
    }
}